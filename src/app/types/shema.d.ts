/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/users/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get test */
        get: operations["showTest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user */
        get: operations["showAllGamesByPage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/genres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all genres */
        get: operations["showAllGenres"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/games": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all games */
        get: operations["showAllGamesByPage_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/games/{game-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get game by id */
        get: operations["showGameById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/games/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get game by title (symbol by symbol) */
        get: operations["showSearchedGame"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/games/random": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get n-number of random games */
        get: operations["showRandomQtyOfGames"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/games/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get most 'popular' games */
        get: operations["showPopularQtyOfGames"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/games/offers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get games by 'special' offer */
        get: operations["showGamesBySpecialOffer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/games/genre": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get games by genre */
        get: operations["showGamesByGenre"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        FullUserInfoDTO: {
            externalId: string;
            email: string;
            birthdate?: string;
            givenName: string;
            familyName: string;
            gender: string;
            balance?: number;
        };
        Genre: {
            /** Format: int64 */
            id?: number;
            name: string;
        };
        GameCriteria: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            title?: string;
            maxPrice?: number;
            genres?: string;
            platforms?: string;
            tags?: string;
            developers?: string;
            publishers?: string;
            sort?: string[];
        };
        GeneralGame: {
            games?: components["schemas"]["ShortGameModel"][];
            /** Format: int64 */
            totalItems?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            currentPage?: number;
        };
        ShortGameModel: {
            /** Format: int64 */
            id?: number;
            title?: string;
            description?: string;
            price?: number;
            coverImageUrl?: string;
        };
        Developer: {
            /** Format: int32 */
            id?: number;
            name: string;
        };
        Game: {
            /** Format: int64 */
            id?: number;
            title: string;
            description?: string;
            /** Format: date */
            releaseDate?: string;
            systemRequirements?: string;
            price?: number;
            coverImageUrl?: string;
            discount: number;
            permitAge: string;
            publisher: components["schemas"]["Publisher"];
            developer: components["schemas"]["Developer"];
            tags?: components["schemas"]["Tag"][];
            genres?: components["schemas"]["Genre"][];
            platforms?: components["schemas"]["Platform"][];
            gameMedia?: components["schemas"]["GameMedia"];
        };
        GameMedia: {
            bannerUrl?: string;
            screenshotUrl?: string;
            trailer?: string;
            trailerScreenshot?: string;
        };
        Platform: {
            /** Format: int32 */
            id?: number;
            name: string;
        };
        Publisher: {
            /** Format: int32 */
            id?: number;
            name: string;
        };
        Tag: {
            /** Format: int32 */
            id?: number;
            name: string;
        };
        GameModelWithGenreLimit: {
            /** Format: int64 */
            id?: number;
            title?: string;
            description?: string;
            price?: number;
            coverImageUrl?: string;
            genres?: components["schemas"]["Genre"][];
        };
        PopularGameModel: {
            /** Format: int64 */
            id?: number;
            title?: string;
            description?: string;
            price?: number;
            coverImageUrl?: string;
            genres?: components["schemas"]["Genre"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    showTest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    showAllGamesByPage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FullUserInfoDTO"];
                };
            };
        };
    };
    showAllGenres: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Genre"][];
                };
            };
        };
    };
    showAllGamesByPage_1: {
        parameters: {
            query: {
                gameCriteria: components["schemas"]["GameCriteria"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GeneralGame"];
                };
            };
        };
    };
    showGameById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "game-id": number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Game"];
                };
            };
        };
    };
    showSearchedGame: {
        parameters: {
            query: {
                title: string;
                qty?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GameModelWithGenreLimit"][];
                };
            };
        };
    };
    showRandomQtyOfGames: {
        parameters: {
            query?: {
                qty?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GameModelWithGenreLimit"][];
                };
            };
        };
    };
    showPopularQtyOfGames: {
        parameters: {
            query?: {
                qty?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PopularGameModel"][];
                };
            };
        };
    };
    showGamesBySpecialOffer: {
        parameters: {
            query: {
                query: string;
                qty?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PopularGameModel"][];
                };
            };
        };
    };
    showGamesByGenre: {
        parameters: {
            query: {
                genre: string;
                qty?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GameModelWithGenreLimit"][];
                };
            };
        };
    };
}
